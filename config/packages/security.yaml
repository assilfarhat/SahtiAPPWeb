security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        #        FOS\UserBundle\Model\UserInterface: md5
        App\Entity\Admin:
            algorithm: auto
        App\Entity\Client:
            algorithm: auto
        App\Entity\Entraineur:
            algorithm: auto
        App\Entity\Nutritioniste:
            algorithm: auto


    providers:

        user_admin:
            entity: { class: App\Entity\Admin, property: email }
        user_client:
            entity: { class: App\Entity\Client, property: email }
        user_coach:
            entity: { class: App\Entity\Entraineur, property: email }
        user_nutri:
            entity: { class: App\Entity\Nutritioniste, property: email }
        #        users_in_memory: { memory: null }
        chain_provider:
            chain:
                providers: [ user_admin,user_client,user_coach,user_nutri]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            access_denied_handler: App\Security\AccessDeniedHandler
#            access_denied_handler: /about

            entry_point: App\Security\AuthenticationEntryPoint
            anonymous: lazy
            provider: chain_provider
            form_login:
                login_path: login
                check_path: login
            guard:
                authenticators:
                    - App\Security\LoginFromAuthenticator

            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            user_checker: App\Security\UserChecker

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
     - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
     - { path: ^/resetpwd, roles: IS_AUTHENTICATED_ANONYMOUSLY  }
     - { path: ^/registre, roles: IS_AUTHENTICATED_ANONYMOUSLY }
     - { path: ^/adminpanel, roles: ROLE_ADMIN }
     -  { path: ^/profile/listavailablecoach, roles: ROLE_USER }
     -  { path: ^/profile/listavailablenutri, roles: ROLE_USER }
     - { path: ^/profile, roles: [ROLE_USER, ROLE_COACH,ROLE_NUTRI] }
