<?php

namespace App\Controller;

use App\Entity\Client;
use App\Form\ClientType;
use App\Repository\ClientRepository;
use App\Repository\CoachRepository;
use App\Repository\NutritionisteRepository;
use Swift_Message;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;
use Symfony\Component\Routing\Annotation\Route;
use function PHPUnit\Framework\throwException;

class ResetpwdController extends AbstractController
{
    /**
     * @Route("/resetpwd", name="app_resetpwd")
     */
    public function index(MailerInterface $mailer, Request $request , ClientRepository $cr ,
                          CoachRepository  $er , NutritionisteRepository $nr): Response
    {
        $form = $this->createFormBuilder()
            ->add('email', EmailType::class, array(
                'attr' => array(
                    'placeholder' => 'Email')))
            ->add('send', SubmitType::class)
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $mail = $form->get('email')->getData();
            if ($cr->searchemail($mail)) { //client
                $newpwd=$this->randomPassword();
                $c=$cr->updateresetpwd($mail , $newpwd);

                $bodymail='Hello  '.$mail .' 
                This is your new password generated by SAHTI Application :'.
                    $newpwd .' 
               The above is a temporary password.
               We highly recommend that you update the password after you log in successfully.
               Thanks.';
                $email = (new Email())
                    ->from('noreplysahti@gmail.com')
                    ->to($mail)
                    //->cc('cc@example.com')
                    //->bcc('bcc@example.com')
                    //->replyTo('fabien@example.com')
                    ->priority(Email::PRIORITY_HIGH)
                    ->subject('Password reset request ')
                    ->text($bodymail);
                $mailer->send($email);

                return $this->redirectToRoute('app_login');

            }else if ($nr->searchemail($mail)) { //nutri
                    $newpwdN=$this->randomPassword();
                    $c=$nr->updateresetpwd($mail , $newpwdN);

                    $bodymail='Hello  '.$mail .' 
                This is your new password generated by SAHTI Application :'.
                        $newpwdN .' 
               The above is a temporary password.
               We highly recommend that you update the password after you log in successfully.
               Thanks.';
                    $email = (new Email())
                        ->from('noreplysahti@gmail.com')
                        ->to($mail)
                        //->cc('cc@example.com')
                        //->bcc('bcc@example.com')
                        //->replyTo('fabien@example.com')
                        ->priority(Email::PRIORITY_HIGH)
                        ->subject('Password reset request ')
                        ->text($bodymail);
                    $mailer->send($email);

                    return $this->redirectToRoute('app_login');

                }else if ($er->searchemail($mail)) { //coach
                $newpwdE = $this->randomPassword();
                $c = $er->updateresetpwd($mail, $newpwdE);

                $bodymail = 'Hello  ' . $mail . ' 
                This is your new password generated by SAHTI Application :' .
                    $newpwdE . ' 
               The above is a temporary password.
               We highly recommend that you update the password after you log in successfully.
               Thanks.';
                $email = (new Email())
                    ->from('noreplysahti@gmail.com')
                    ->to($mail)
                    //->cc('cc@example.com')
                    //->bcc('bcc@example.com')
                    //->replyTo('fabien@example.com')
                    ->priority(Email::PRIORITY_HIGH)
                    ->subject('Password reset request ')
                    ->text($bodymail);
                $mailer->send($email);

                return $this->redirectToRoute('app_login');
            }
            else{
                $this->get('session')->getFlashBag()->add(
                    'alert',
                    'Email does not exists ! '
                );
            }
        }
        return $this->render('resetpwd/reset.html.twig', ['f' => $form->createView()]);
    }

    function randomPassword()
    {
        $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
        $pass = array(); //remember to declare $pass as an array
        $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache
        for ($i = 0; $i < 8; $i++) {
            $n = rand(0, $alphaLength);
            $pass[] = $alphabet[$n];
        }
        return implode($pass); //turn the array into a string
    }

}